tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  - plugin:cloudify-gcp-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-fabric-plugin
  - imports/ansible.yaml

inputs:

  image:
    description: >
      A GCE Image ID. Tested with a Centos 7 image.
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20170523

  instance_type:
    description: >
      A GCE instance sytpe.
    default: n1-standard-2

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: centos

  agent_key_public:
    default: { get_secret: agent_key_public }

  agent_key_private:
    default: { get_secret: agent_key_private }

  resource_prefix:
    default: cfy-hw

  manager_network:
    default: external

  network_deployment_name:
    default: gcp-example-network

  host_ip:
    default: { get_attribute: [ host, networkInterfaces, 0, accessConfigs, 0, natIP ] }

dsl_definitions:

  client_config: &gcp_config
    auth:
      type: service_account
      auth_uri: https://accounts.google.com/o/oauth2/auth
      token_uri: https://accounts.google.com/o/oauth2/token
      auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
      client_x509_cert_url: { get_secret: gcp_client_x509_cert_url }
      client_email: { get_secret: gcp_client_email }
      client_id: { get_secret: gcp_client_id }
      project_id: { get_secret: gcp_project_id }
      private_key_id: { get_secret: gcp_private_key_id }
      private_key: { get_secret: gcp_private_key }
    project: { get_secret: gcp_project_id }
    zone: { get_secret: gcp_zone }

node_templates:

  host:
    type: cloudify.gcp.nodes.Instance
    properties:
      gcp_config: *gcp_config
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
      image_id: { get_input: image }
      instance_type: { get_input: instance_type }
      zone: { get_secret: gcp_zone }
      external_ip: true
      block_project_ssh_keys: true
      startup_script:
        type: string
        script:
          concat:
          - |
            cat <<EOT >> /etc/yum.repos.d/epel.repo
            # installed by cloud-init
            [epel]
            name=Extra Packages for Enterprise Linux 7 - x86_64
            #baseurl=http://download.fedoraproject.org/pub/epel/7/x86_64
            mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=x86_64
            failovermethod=priority
            enabled=1
            gpgcheck=1
            gpgkey=https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
            EOT
          - |
            yum -t -y install ansible tar
          - |
            chown root:root /etc/yum.repos.d/epel.repo
          - |
            chmod 0444 /etc/yum.repos.d/epel.repo
          - |
            chmod 0444 /etc/yum.repos.d/epel.repo
          - |
            mkdir -p /etc/ansible
          - |
            chown -R centos:wheel /etc/ansible
          - |
            touch /var/log/ansible.log
          - |
            chown root:wheel /var/log/ansible.log
          - |
            chmod 0776 /var/log/ansible.log
          - |
            groupadd mongodb
    relationships:
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.relationships.contained_in
      target: gcp
    interfaces:
      cloudify.interfaces.lifecycle:
        create: &instance_ssh_key_prep
          implementation: scripts/gcp/instance_ssh_key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
            - { get_secret: agent_key_public }


  ansible_fw:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
        - 22
        - { get_input: nodejs_port }
        - { get_input: mongo_port }
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  public_subnet:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      use_external_resource: true
      name: { get_attribute: [ gcp, deployment, outputs, public_subnet ] }
      region: { get_attribute: [ gcp, deployment, outputs, region ] }
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      use_external_resource: true
      name: { get_attribute: [ gcp, deployment, outputs, network ] }
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: gcp

  gcp:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-examples/gcp-example-network/archive/master.zip
          main_file_name: simple-blueprint.yaml
          external_resource: external
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            network: network
            public_subnet: public_subnet
            region: region
            zone: zone
          external_resource: external
        reexecute: false
