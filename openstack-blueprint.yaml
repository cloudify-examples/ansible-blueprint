tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.2.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.5.0/plugin.yaml
  - imports/cloud-config.yaml
  - imports/ansible.yaml

inputs:

  keystone_username:
    default: { get_secret: keystone_username }

  keystone_password:
    default: { get_secret: keystone_password }

  keystone_tenant_name:
    default: { get_secret: keystone_tenant_name }

  keystone_url:
    default: { get_secret: keystone_url }

  region:
    default: { get_secret: region }

  external_network_name:
    default: { get_secret: external_network_name }

  router_name:
    default: { get_secret: router_name }

  public_network_name:
    default: { get_secret: public_network_name }

  private_network_name:
    default: { get_secret: public_network_name }

  public_subnet_name:
    default: { get_secret: public_subnet_name }

  private_subnet_name:
    default: { get_secret: public_subnet_name }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  image:
    description: >
      Image to be used when launching agent VM's
    type: string
    default: { get_secret: centos_core_image }

  flavor:
    description: >
      Flavor of the agent VM's
    type: string
    default: { get_secret: small_image_flavor }

  agent_user:
    description: >
      User for connecting to agent VM's
    type: string
    default: centos

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:

  host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_input: agent_key_private }
      server:
        key_name: ''
        image: ''
        flavor: ''
      management_network_name: { get_property: [ network0, resource_id ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.openstack.server_connected_to_port
        target: port
      - type: cloudify.relationships.depends_on
        target: cloud_config

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: network0
      - type: cloudify.relationships.depends_on
        target: subnet0
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: ip

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: openstack_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 8080
        - remote_ip_prefix: 0.0.0.0/0
          port: 27017

  subnet0:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: network0
        type: cloudify.relationships.contained_in

  network0:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_input: external_network_name }

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [ host, ip ] }
      - ':'
      - '8080'
