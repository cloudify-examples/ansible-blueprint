tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.5/plugin.yaml
  - http://www.getcloudify.org/spec/azure-plugin/1.5.1/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5/plugin.yaml
  - imports/ansible.yaml

inputs:

  image:
    default:
      publisher: OpenLogic
      offer: CentOS
      sku: '7-CI'
      version: latest

  size:
    default: Standard_A0

  resource_prefix:
    default: ansible

  resource_suffix:
    default: '1'

  retry_after:
    type: integer
    default: 60

  location:
    default: { get_secret: azure_location }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: centos

  agent_key_public:
    default: { get_secret: agent_key_public }

  agent_key_private:
    default: { get_secret: agent_key_private }

  ssh_public_keys:
    description: the public key
    default:
    - path: {concat:[ '/home/', { get_input: agent_user }, '/.ssh/authorized_keys' ]}
      keyData: { get_input: agent_key_public }

  manager_network:
    default: external

  host_ip:
    default: { get_attribute: [ host, public_ip ] }

dsl_definitions:

  azure_config: &azure_config
    subscription_id: { get_secret: azure_subscription_id }
    tenant_id: { get_secret: azure_tenant_id }
    client_id: { get_secret: azure_client_id }
    client_secret: { get_secret: azure_client_secret }

node_templates:

  ansible_requirements:
    type: cloudify.azure.nodes.compute.VirtualMachineExtension
    properties:
      location: { get_secret: azure_location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              publisher: Microsoft.Azure.Extensions
              type: CustomScript
              typeHandlerVersion: '2.0'
              autoUpgradeMinorVersion: true
              settings:
                commandToExecute:
                  concat:
                  - |
                    cat <<EOT >> /etc/yum.repos.d/epel.repo
                    # installed by cloud-init
                    [epel]
                    name=Extra Packages for Enterprise Linux 7 - x86_64
                    #baseurl=http://download.fedoraproject.org/pub/epel/7/x86_64
                    mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=x86_64
                    failovermethod=priority
                    enabled=1
                    gpgcheck=1
                    gpgkey=https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
                    EOT
                  - |
                    yum -t -y install ansible tar
                  - |
                    chown root:root /etc/yum.repos.d/epel.repo
                  - |
                    chmod 0444 /etc/yum.repos.d/epel.repo
                  - |
                    chmod 0444 /etc/yum.repos.d/epel.repo
                  - |
                    mkdir -p /etc/ansible
                  - |
                    chown -R centos:wheel /etc/ansible
                  - |
                    touch /var/log/ansible.log
                  - |
                    chown root:wheel /var/log/ansible.log
                  - |
                    chmod 0776 /var/log/ansible.log
                  - |
                    groupadd mongodb
    relationships:
    - type: cloudify.azure.relationships.vmx_contained_in_vm
      target: host

  host:
    type: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      location: { get_secret: azure_location }
      retry_after: { get_input: retry_after }
      os_family: linux
      azure_config: *azure_config
      resource_config:
        hardwareProfile: {}
        storageProfile: {}
        osProfile: {}
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: host_nic
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: pkg.cloudify_azure.resources.compute.virtualmachine.create
          inputs:
            args:
              hardwareProfile:
                vmSize: { get_input: size }
              storageProfile:
                imageReference: { get_input: image}
              osProfile:
                adminUsername: { get_input: agent_user }
                adminPassword: ''
                linuxConfiguration:
                  ssh:
                    publicKeys: { get_input: ssh_public_keys }
                  disablePasswordAuthentication: true

  host_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: host_nic_ip_cfg

  host_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: ip
    - type: cloudify.relationships.contained_in
      target: azure

  network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      name: {concat:[{get_input: resource_prefix},nsg,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: ssh
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 101
            access: Allow
            direction: Inbound
        - name: nodejs
          properties:
            description: NodeJS access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_input: nodejs_port }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        - name: mongo
          properties:
            description: MongoDB access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_input: mongo_port }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 103
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      name: {concat:[{get_input: resource_prefix},availset,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      resource_group_name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      name: { get_attribute: [ azure, deployment, outputs, public_subnet ] }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      resource_group_name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      name: { get_attribute: [ azure, deployment, outputs, virtual_network ] }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
      azure_config: *azure_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: azure

  azure:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: azure-example-network
          blueprint_archive: https://github.com/cloudify-examples/azure-example-network/archive/master.zip
          main_file_name: simple-blueprint.yaml
          external_resource: external
        deployment:
          id: azure-example-network
          outputs:
            resource_group: resource_group
            virtual_network: virtual_network
            public_subnet: public_subnet
            location: location
          external_resource: external
        reexecute: false
